#!/usr/bin/env node

// this script downloads infojson for clips in old videodb
// requires youtube-dl.py from http://youtube-dl.org/

var _ = require('lodash');
var execSync = require("exec-sync");
var fs = require('fs');

var opts = require("nomnom")
  .script("infojson-from-videodb")
  .option('videodb', {
       position: 0,
       help: "videodb to parse",
       list: false,
       required: true
  })
  .help("Author: ".bold +
    "leesei@gmail.com".underline + "       "+
    "Licence: ".bold + "MIT\n")
  .parse();

function loadJson(filepath) {
  return JSON.parse(fs.readFileSync(filepath, 'utf8'));
}

// parse { extractor, id } out of key from old dbjson
function getVideoSource(key) {
  var re = /\('(.+)',\s*'(.+)'\)/;
  var match = key.match(re);
  // console.log(match[1], match[2]);
  return (match)? {
    extractor: match[1],
    video_id: match[2]
  } : null;
}

// console.log(opts);

var failedEntries = {};
_.forOwn(loadJson(opts.videodb), function(val, key) {
  // console.log(key);
  var url = '';
  var source = getVideoSource(key);
  if (source) {
    if (source.extractor == 'youtube') {
      url = 'https://www.youtube.com/watch?v='+source.video_id;
    }
    else if (source.extractor == 'vimeo') {
      url = 'https://www.vimeo.com/'+source.video_id;
    }
  }

  if (!url){
    console.error('unknown source', key);
    failedEntries[key] = val;
    return;
  }

  console.log('downloading info.json: ' + url);
  try {
    execSync("youtube-dl.py --skip-download --write-info-json -o '%(autonumber)s-[%(title)s]-[%(id)s].%(ext)s' " + url);
  }
  catch (e){
    console.error('error downloading', key);
    console.error(e);
    failedEntries[key] = val;
    return;
  }
});

var failOutfile = '1-failedEntries.json';
if (Object.keys(failedEntries).length !== 0) {
  console.error('failed on some entries, see ' + failOutfile);
  fs.writeFileSync(failOutfile, JSON.stringify(failedEntries, null, 2));
}
