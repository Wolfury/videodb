#!/usr/bin/env node

// this script updates existing infojson
// requires youtube-dl.py from http://youtube-dl.org/

var _ = require('lodash');
var execSync = require("exec-sync");
var fs = require('fs');

var opts = require("nomnom")
  .script("update-infojson")
  .option('infojson', {
       position: 0,
       help: "info.json to update",
       list: true,
       required: true
  })
  .help("Author: ".bold +
    "leesei@gmail.com".underline + "       "+
    "Licence: ".bold + "MIT\n")
  .parse();

function loadJson(filepath) {
  return JSON.parse(fs.readFileSync(filepath, 'utf8'));
}

function sourceToUrl(source) {
  if (source.extractor == 'youtube') {
    return 'https://www.youtube.com/watch?v='+source.id;
  }
  else if (source.extractor == 'vimeo') {
    return 'https://www.vimeo.com/'+source.id;
  }
  else {
    return '';
  }
}

// console.log(opts);

var failedEntries = [];
_.forEach(opts.infojson, function (f) {
  // console.log(f);
  var infojson = loadJson(f);
  var url = sourceToUrl(infojson);

  if (!url){
    console.error('error parsing', f);
    return;
  }

  console.log('downloading info.json: ' + url);
  try {
    // execSync("youtube-dl.py --skip-download --write-info-json -o '" + f.replace('.info.json', '') + "' " + url);
    execSync("youtube-dl.py --skip-download --write-info-json -o '%(autonumber)s-[%(title)s]-[%(id)s].%(ext)s' " + url);
  }
  catch (e){
    console.error('error downloading', url);
    console.error(e);
    failedEntries.push(f);
    return;
  }
});

var failOutfile = '2-failedEntries.json';
if (failedEntries.length !== 0) {
  console.error('failed on some entries, see ' + failOutfile);
  fs.writeFileSync(failOutfile, JSON.stringify(failedEntries, null, 2));
}
