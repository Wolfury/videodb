#!/usr/bin/env node

// this script migrates tags and rating from old videodb to new dbjson

var _ = require('lodash');
var execSync = require("exec-sync");
var fs = require('fs');
var util = require('./util');

var opts = require("nomnom")
  .script("migrate-videodb")
  .option('input', {
      position: 0,
      help: "videodb to migrate",
      required: true
  })
  .option('output', {
      position: 1,
      help: "dbjson to migrate to",
      required: true
  })
  .help("Author: ".bold +
    "leesei@gmail.com".underline + "       "+
    "Licence: ".bold + "MIT\n")
  .parse();

// console.log(opts);

var failedEntries = {};
var videodb =  util.loadJson(opts.output);
if (!_.isArray(videodb)) {
  console.error('invalid out file:', opts.output);
  return;
}
// console.log(videodb);

_.forOwn(util.loadJson(opts.input), function(val, key) {
  // console.log(key);

  var source = util.getVideoSource(key);
  if (!source) {
    console.error('unknown source', key);
    failedEntries[key] = val;
    return;
  }
  var entry = _.find(videodb, function(e) {
    return (e.extractor == source.extractor &&
            e.video_id == source.video_id);
  });

  if (!entry) {
    console.error('entry not found', key);
    failedEntries[key] = val;
    return;
  }

  entry.tags = val.tags;
  entry.rating = val.rating;
});

if (util.writeJson(videodb, opts.output)){
  console.info('migrated to ' + opts.output);
}

var failOutfile = '4-failedEntries.json';
if (util.writeJson(failedEntries, failOutfile)) {
  console.error('failed on some entries, see ' + failOutfile);
}
